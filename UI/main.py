import io
import altair as alt
import streamlit as st
from streamlit_option_menu import option_menu
import webbrowser
import pandas as pd
from PIL import Image
import plotly.express as px
import base64

github_url = 'https://github.com/CarolWen39/Predict-House-prices-in-major-California-counties'

st.set_page_config(page_title="Team Makapaka", page_icon="random", layout="centered", initial_sidebar_state="auto")
data = pd.read_csv('UI/data.csv')

data['Year'] = data.Date.str.slice(0, 4)

county = ['Los Angeles', 'Orange', 'Riverside', 'Sacramento', 'San Bernardino', 'San Diego', 'San Francisco',
          'Santa Barbara', 'Santa Clara', 'Santa Cruz']

file_ = open("UI/makapaka_logo.gif", "rb")
contents = file_.read()
data_url = base64.b64encode(contents).decode("utf-8")
file_.close()

prediction = pd.read_csv('UI/Prediction.csv')


def get_chart(data):
    hover = alt.selection_single(
        fields=["Date"],
        nearest=True,
        on="mouseover",
        empty="none",
    )

    lines = (
        alt.Chart(data, title="House Prices")
            .mark_line()
            .encode(
            x=alt.X("Date:T", axis=alt.Axis(format="%Y")),
            y="Price",
            color="County",
        ).properties(width=800, height=400)
    )

    # Draw points on the line, and highlight based on selection
    points = lines.transform_filter(hover).mark_circle(size=65)

    # Draw a rule at the location of the selection
    tooltips = (
        alt.Chart(data)
            .mark_rule()
            .encode(
            x=alt.X("Date:T", axis=alt.Axis(format="%b %Y")),
            y="Price",
            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),
            tooltip=[
                alt.Tooltip("County", title="County"),
                alt.Tooltip("Date:T", title="Date"),
                alt.Tooltip("Price", title="Price (USD)"),
            ],
        )
            .add_selection(hover)
    )
    return (lines + points + tooltips).interactive()


def get_chart_pred(data):
    hover = alt.selection_single(
        fields=["Date"],
        nearest=True,
        on="mouseover",
        empty="none",
    )

    lines = (
        alt.Chart(data, title="House Prices")
            .mark_line()
            .encode(
            x=alt.X("Date:T", axis=alt.Axis(format="%b %Y")),
            y="Price",
            color="County",
        ).properties(width=800, height=400)
    )

    # Draw points on the line, and highlight based on selection
    points = lines.transform_filter(hover).mark_circle(size=65)

    # Draw a rule at the location of the selection
    tooltips = (
        alt.Chart(data)
            .mark_rule()
            .encode(
            x=alt.X("Date:T", axis=alt.Axis(format="%b %Y")),
            y="Price",
            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),
            tooltip=[
                alt.Tooltip("County", title="County"),
                alt.Tooltip("Date:T", title="Date"),
                alt.Tooltip("Price", title="Price (USD)"),
            ],
        )
            .add_selection(hover)
    )
    return (lines + points + tooltips).interactive()

with st.sidebar:
    selected = option_menu("Team Makapaka", ["MAP", 'EDA', 'GitHub'],
                           icons=['pin-map', 'clipboard-data', 'github'], menu_icon="people", default_index=0)
    st.sidebar.write("""
        ## About
        This website is used to predict housing prices according to potential environmental issues
        of 10 major counties in California from Jan, 2022 to August, 2022. It will provide insights for buyers when 
        considering investing or living in the area, or for real estate agents when 
        evaluating and setting reasonable prices.
        We used 6 models, including LR, SVR, RF, KNN Regression, Arima and XGBoost, and prediction result of this website
        is generated by the best model -- XGBoost. 
         
        ## Member
        ##### Mengsha Wen mengshaw@usc.edu
        ##### Qinyang Fang qinyangf@usc.edu
        ##### Wenhao Li wli67054@usc.edu
        """)
if selected == 'GitHub':
    webbrowser.open_new_tab(github_url)

elif selected == 'EDA':
    st.markdown(
        f'<p style="text-align:center;"><img src="data:image/gif;base64,{data_url}" alt="cat gif" width="800"  height="300"></p>',
        unsafe_allow_html=True,
    )
    st.markdown("<h1 style='text-align: center; color: black;'>Exploratory Data Analysis</h1>", unsafe_allow_html=True)
    st.text("")
    st.text("")

    st.markdown("### Historical Price Comparison in Different Counties")
    option = st.multiselect(
        'Which county would you like to select?',
        county)

    select_data = data[data['County'].isin(option)][['County', 'Date', 'Price', 'Year']]

    chart = get_chart(data=select_data)
    st.altair_chart(chart.interactive(), use_container_width=True)
    st.text("")
    st.text("")

    st.markdown("### Data Overview")
    st.dataframe(data)


    def convert_df(df):
        # IMPORTANT: Cache the conversion to prevent computation on every rerun
        return df.to_csv().encode('utf-8')


    csv = convert_df(data)

    st.download_button(
        label="Download data as CSV",
        data=csv,
        file_name='history_house_price_in_california.csv',
        mime='text/csv',
    )
    st.text("")

    st.markdown("### Data Information")
    buffer = io.StringIO()
    data.info(buf=buffer)
    s = buffer.getvalue()
    st.text(s)
    st.text("")

    st.markdown("### Data Description")
    st.dataframe(data.describe())
    st.text("")

    st.markdown("### PairPlot")
    image1 = Image.open('UI/pairplot.png')
    st.image(image1, width=800)
    st.text("")

    st.markdown("### HeatMap")
    image2 = Image.open('UI/heatmap.png')
    st.image(image2, width=800)
    st.text("")



else:
    st.markdown(
        f'<p style="text-align:center;"><img src="data:image/gif;base64,{data_url}" alt="cat gif" width="800" height="300"></p>',
        unsafe_allow_html=True,
    )

    st.markdown("<h1 style='text-align: center; color: black;'>Predict House Prices in California</h1>",
                unsafe_allow_html=True)
    st.markdown("<h4 style='text-align: center; color: black;'>Environmental issues impact on Housing California</h4>",
                unsafe_allow_html=True)
    st.text("")

    #st.markdown("### Map")

    map_data = [['Los Angeles', 770000, 34.0522, -118.2437], ['Orange', 1182500, 33.7175, -117.8311],
                ['Riverside', 586000, 33.9806, -117.3755], ['Sacramento', 515000, 38.4747, -121.3542],
                ['San Bernardino', 460000, 34.9592, -116.4194], ['San Diego', 836700, 32.7157, -117.1611],
                ['San Francisco', 1690000, 37.7749, -122.4194], ['Santa Barbara', 937500, 34.4208, -119.6982],
                ['Santa Clara', 1740000, 37.3337, -121.8907], ['Santa Cruz', 1204500, 37.0454, -121.9580]]
    df = pd.DataFrame(map_data, columns=['county', 'price', 'lat', 'lon'])

    fig = px.scatter_mapbox(df, lat="lat", lon="lon", hover_name="county", hover_data=["price"],
                            color_discrete_sequence=['#636EFA'], zoom=5, height=500, width=800, size='price')
    fig.update_layout(mapbox_style="open-street-map")
    fig.update_layout(margin={"r": 0, "t": 0, "l": 0, "b": 0})
    st.plotly_chart(fig)

    st.text("")
    st.text("")

    st.markdown("### Price Prediction in Different Counties")
    option = st.multiselect(
        'Which county would you like to select?',
        county)

    predict_data = prediction[prediction['County'].isin(option)][['County', 'Date', 'Price']]
    # Display both charts together
    chart = get_chart_pred(data=predict_data)
    st.altair_chart(chart.interactive(), use_container_width=True)
